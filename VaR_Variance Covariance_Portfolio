#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Fri Jul 24 14:39:14 2020

@author: aayush
"""

#Import necessary libraries
import pandas as pd
from pandas_datareader import data as pdr
import numpy as np
import datetime as dt

#Plotting
import matplotlib.pyplot as plt
import seaborn
import matplotlib.mlab as mlab

#Data fetching
import yfinance as yf

#Statistical Calculation
from scipy.stats import norm

#Calculate periodic returns of the stocks in the portfolio
#Create our portfolio of equities
tickers = ['RELIANCE.NS','HDFCBANK.BO', 'INFY.BO', 'HINDUNILVR.BO']

#Set the investment weights (I arbitrarily picked for example)
weights = np.array([.25, .3, .15, .3])

#Set an initial investment level
initial_investment = 1000000

#Download closing prices
data = pdr.get_data_yahoo(tickers, start=dt.date.today()-dt.timedelta(1825), end=dt.date.today())['Close']

#From the closing prices, calculate periodic returns
returns = data.pct_change()

returns.tail()

#Generate Var-Cov matrix
cov_matrix = returns.cov()
cov_matrix

#Calculate mean returns for each stock
avg_rets = returns.mean()

#Calculate mean returns for portfolio overall, using dot product to 
#normalize individual means against investment weights

port_mean = avg_rets.dot(weights)

#Calculate portfolio standard deviation
port_stdev = np.sqrt(weights.T.dot(cov_matrix).dot(weights))
 
#Calculate mean of investment
mean_investment = (1+port_mean) * initial_investment
             
#Calculate standard deviation of investmnet
stdev_investment = initial_investment * port_stdev

#Select your confidence interval
conf_level1 = 0.05

#Calculating VaR
cutoff1 = norm.ppf(conf_level1, mean_investment, stdev_investment)

#Finally, we can calculate the VaR at our confidence interval
var_1d1 = initial_investment - cutoff1
print(f'Value at Risk at confidence level of 95% is {round(var_1d1,2)}')

#Value at risk over n-day time period

#Calculate n Day VaR
var_array = []
num_days = int(15)
for x in range(1, num_days+1):    
    var_array.append(np.round(var_1d1 * np.sqrt(x),2))
    print(str(x) + " day VaR @ 95% confidence: " + str(np.round(var_1d1 * np.sqrt(x),2)))

#Build plot
plt.xlabel("Day #")
plt.ylabel("Max portfolio loss (INR)")
plt.title("Max portfolio loss (VaR) over 15-day period")
plt.plot(var_array, "r")
